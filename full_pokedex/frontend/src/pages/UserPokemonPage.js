import React, { useContext, useState, useEffect } from 'react'
import AuthContext from '../context/AuthContext';
import Card from '../components/Card'
import FilterContext from '../context/FilterContext';

/**
 * Pokemon page element for users. Displays a container filled with records
 * as cards for every record that's retrieved from the API. Each card
 * is generated by taking the record's pokemon and displaying images/buttons if each
 * category is set in the pokemon's data.
 *
 * @returns page element for a user
 */
const UserPokemonPage = () => {
  //state to hold record data
  let [recordList, setRecordList] = useState([]);
  //state holds list of pokemon generations used to separate the page
  let [genList, setGenList] = useState([]);
  let { authTokens, logoutUser } = useContext(AuthContext);
  let { filterData, ANY } = useContext(FilterContext);

  useEffect(() => {
    getRecordDataFromAPI();
  }, [])

  /**
   * Sends request to API for a list of all records for the user in the database. Upon receiving
   * a valid response, sets the received data to the recordList state and generates
   * the generation list. If an invalid response is received, logout user and redirect to login page.
   */
  let getRecordDataFromAPI = async() => {
    let response = await fetch('http://127.0.0.1:8000/api/record-list', {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "Authorization": "Bearer " + String(authTokens.access)
        }
    })
    let data = await response.json();
    if(response.status === 200){
      setRecordList(data);
    }
    else {
      logoutUser();
    }
    let numGens = 0;
    data.forEach((record) => {
      numGens = Math.max(numGens, record.pokemon.generation);
    })
    let newGenList = [];
    for(let i = 1; i <= numGens; i++) {
      newGenList.push(i);
    }
    setGenList(newGenList);
  }

  return(
    <div className="container mainContainer">
    {
      genList.map((gen, index) => {
        if ( filterData['generation'] === ANY || parseInt(filterData['generation']) === gen){
          return(
            <div key={index} className="genContainer">
              <h1 className="genHeader">
                Generation {gen}
              </h1>
              <div className="pokemonContainer">
                {recordList.map((record, index2) => {
                  if(record.pokemon.generation === gen){
                    return(
                      <Card key={index2} record={record} is_user_account={true} pokemon={record.pokemon} />
                    )
                  }
                  else{return null;}
                })}
              </div>
            </div>
          )
        }
      })
    }
    </div>
  )
}

export default UserPokemonPage;
